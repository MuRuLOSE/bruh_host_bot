import asyncio
import logging
import sys
import base64
import datetime
import pytz
import random
import subprocess
import sqlite3
import paramiko
import hashlib
from urllib.parse import urlencode
from hello import gen_banner

from aiogram.types import UserProfilePhotos
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.utils import markdown
from aiogram.handlers import CallbackQueryHandler

try:
    sqlite_connection = sqlite3.connect('hosting.db')
    cursor = sqlite_connection.cursor()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ SQLite")

    sqlite_create_table_query = '''
    CREATE TABLE users (
        user_id INTEGER PRIMARY KEY,
        username TEXT);
    '''

    cursor.execute(sqlite_create_table_query)
    sqlite_connection.commit()

    cursor.close()

except sqlite3.Error as error:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ sqlite", error)

# Bot token can be obtained via https://t.me/BotFather
TOKEN = ("6600281143:AAEUdX9OZ0ahNGJO31udcbxOQlm0XH2rEAQ")

# All handlers should be attached to the Router (or Dispatcher)
dp = Dispatcher()
bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
router = Router()


def get_stickers(sticker):
    stickers ={
        "hi": "CAACAgIAAxkBAAEBFIBlBYCy4MukVlSIr49yQkUcB5KqugAC8iwAAnDW4UuITBkIiCOD3zAE",
        "why_we": "CAACAgIAAxkBAAEBFJllBYwOMvkcW-jc-jqUySGkj-itrAACsDEAAuQ-2Ese8oqM19kLbDAE",
        "buy": "CAACAgIAAxkBAAEBFKdlBY52J-ZZTl27HltCV__2Koo6FQACfTEAAmAg4Uv6Bl3qFNLgGDAE",
        "about": "CAACAgIAAxkBAAEBFL5lBZIbdvns4BFn11T2Q1VOukM86gAC9zIAAjjk4UuDtDh0zf9BQDAE",
        "404": "CAACAgIAAxkBAAEBFMdlBZJiKFR3-TUqvEKpZ0N9xrTTYQACXioAAnjx2Es23p3FQ7sh_jAE"

    }
    
    return stickers.get(sticker, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

def start(user_id):
    b = InlineKeyboardBuilder()

    b.button(text=f"‚ùì –ù–∞—à–∏ –ø—Ä–µ–π–º—É—â–µ—Å—Ç–≤–∞",callback_data=f"why_we:{user_id}")
    b.button(text=f"‚ÅâÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å",callback_data=f"about:{user_id}")
    b.button(text=f"ü™ô –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",callback_data=f"add_pay:{user_id}")
    b.button(text=f"ü™Ñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",callback_data=f"buy:{user_id}")
    b.button(text=f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —é–∑–µ—Ä–±–æ—Ç–∞–º–∏",callback_data=f"settings:{user_id}")
    
    b.adjust(2,2,1)
    return b.as_markup()

def buy(user_id):
    b = InlineKeyboardBuilder()
    merchant_id = 'df489913-b39e-42d4-ae78-a27572792a0b' # ID –í–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    amount = 100 # –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ
    currency = 'RUB' # –í–∞–ª—é—Ç–∞ –∑–∞–∫–∞–∑–∞
    secret = '4f9ae210f241b7a45bf767b25fa17a53' # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á ‚Ññ1 –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
    order_id = f'{random.randint(1,8973124612874361296128736128367)}' # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ –≤ –í–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
    desc = user_id # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    lang = 'ru' # –Ø–∑—ã–∫ —Ñ–æ—Ä–º—ã

    sign = f':'.join([
        str(merchant_id),
        str(amount),
        str(currency),
        str(secret),
        str(order_id)
    ])

    params = {
        'merchant_id': merchant_id,
        'amount': amount,
        'currency': currency,
        'order_id': order_id,
        'sign': hashlib.sha256(sign.encode('utf-8')).hexdigest(),
        'desc': desc,
        'lang': lang
    }
    b.button(text=f"üêô –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É",callback_data=f"buy_link:{user_id}",url="https://aaio.io/merchant/pay?" + urlencode(params))
    b.button(text=f"üá∫üá¶ –û–ø–ª–∞—Ç–∞ –≤ –£–∫—Ä–∞–∏–Ω–µ",callback_data=f"buy_ua:{user_id}",url="t.me/tot_882")
    return b.as_markup()

def settings(username,user_id):
    b = InlineKeyboardBuilder()
    b.button(text=f"üî¥ –í—ã–∫–ª—é—á–∏—Ç—å",callback_data=f"stop:{username}:{user_id}")
    b.button(text=f"üü¢ –í–∫–ª—é—á–∏—Ç—å",callback_data=f"start:{username}:{user_id}")
    b.button(text=f"üîò –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞",callback_data=f"restart:{username}:{user_id}")
    return b.as_markup()   



@router.message(CommandStart())
@router.message(F.text.lower=="—Å—Ç–∞—Ä—Ç" or "–ø—Ä–∏–≤–µ—Ç")
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    user_profile_photo = await bot.get_user_profile_photos(user_id=message.from_user.id, offset=0, limit=1)
    sqlite_insert_query = f"""
        INSERT INTO users (user_id, username)  VALUES  ({message.from_user.id}, "NULL")
    """
    try:
        cursor.execute(sqlite_insert_query)
    except Exception:
        pass
    sqlite_connection.commit()

    now = datetime.datetime.now(tz=pytz.timezone('Europe/Moscow'))
    
    hi = ""
    if now.hour < 5 or now.hour >= 20:
        hi = ["–î–æ–±—Ä–æ–π –Ω–æ—á–∏","–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "–ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤","–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è"]

    elif now.hour < 13:
        hi = ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ","–î–æ–±—Ä–µ–π—à–µ–≥–æ —É—Ç—Ä–µ—á–∫–∞","–°–≤–µ—Ç–ª–æ–≥–æ —É—Ç—Ä–∞","–°–æ–ª–Ω–µ—á–Ω–æ–≥–æ –¥–Ω—è"]

    elif now.hour < 18:
        hi = ["–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è", "–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è"]

    else:
        hi = ["–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞","–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"]

    git = subprocess.check_output(["git", "rev-parse", "HEAD"]).strip().decode("utf-8")
    await message.answer_sticker(rf'{get_stickers("hi")}' )
    if len(user_profile_photo.photos) > 0:
        file = await bot.get_file(user_profile_photo.photos[0][0].file_id)
        await bot.download_file(file.file_path, f'avatars/avatar_{message.from_user.id}.png')

        await message.answer_photo(photo=gen_banner(username=message.from_user.first_name,user_id=message.from_user.id,hi=random.choice(hi),avatar=f"avatars/avatar_{message.from_user.id}"),caption=f'<b>–ù–∞—à —Ö–æ—Å—Ç–∏–Ω–≥ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –¥–µ—à–µ–≤—ã–π –∏ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–µ–π–º—É—â–µ—Å—Ç–≤–∞.</b> #{git[:7]}',reply_markup=start(message.from_user.id))
    else:
        await message.answer(f'<b>{random.choice(hi)}</b>, <i>{message.from_user.first_name}</i>\n<b>–ù–∞—à —Ö–æ—Å—Ç–∏–Ω–≥ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –¥–µ—à–µ–≤—ã–π –∏ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–µ–π–º—É—â–µ—Å—Ç–≤–∞.</b> #{git[:7]}',reply_markup=start(message.from_user.id))
    
    

@router.callback_query()
async def handler_inline(call: types.CallbackQuery):
    private_key_path = 'C:/users/nuser/downloads/PON.pem'
    data = call.data.split(":")
    
    if data[0] == "why_we":
        await bot.send_sticker(data[1],rf'{get_stickers("why_we")}')
        await bot.send_message(data[1],"<b>–ù–∞—à —Ö–æ—Å—Ç –Ω–µ –Ω–∞ üê≥ Docker. –ü—Ä–µ–π–º—É—â–µ—Å—Ç–≤–æ –≤ —Ç–æ–º —á—Ç–æ –º–æ–¥—É–ª–∏, –∏ –±–∏–±–ª–µ–æ—Ç–µ–∫–∏ –Ω–µ –±—É–¥—É—Ç —Å–ª–µ—Ç–∞—Ç—å.\n\n–ê–≤—Ç–æ —Ä–µ—Å—Ç–∞—Ä—Ç –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ (—á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤—ã–∫–ª—é—á–∞—Ç—å—Å—è –±—É–¥–µ—Ç)\n\n–ê —Ö–æ—Ç—å —ç—Ç–æ –∏ –Ω–µ —Å–æ–≤—Å–µ–º –ø—Ä–µ–π–º—É—â–µ—Å—Ç–≤–æ... –ù–æ —É –≤–∞—Å –±—É–¥–µ—Ç üíé VDS –∫–∞–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</b>")
    elif data[0] == "add_pay":

        
        await bot.send_sticker(data[1],rf'{get_stickers("buy")}')
        await bot.send_message(data[1],"<b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ –Ω–∞—à —Ö–æ—Å—Ç–∏–Ω–≥!\n\n–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è–ª–∏—Å—å –±—ã—Å—Ç—Ä–æ, –∏ –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\</b>\n\n<i>p.s –û–ø–ª–∞—Ç–∞ —Å –£–∫—Ä–∞–∏–Ω—ã —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ—á–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –±–æ–ª—å—à–∞—è –∫–æ–º–º–∏—Å–∏—è.</i>",reply_markup=buy(call.from_user.id))

    elif data[0] == "about":
        await bot.send_sticker(data[1],rf'{get_stickers("about")}')
        await bot.send_message(data[1],"<b>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</b>")
    elif data[0] == "settings":
        
        cursor = sqlite_connection.cursor()
        user_id = call.from_user.id
        cursor.execute("SELECT username FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if row is not None:
            username = row[0]
            if username ==  "NULL":
                await bot.send_message(data[1],"–Æ–∑–µ—Ä–Ω–µ–π–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞ —ç—Ç–æ –≤—Å—ë –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                return
            else:
                await bot.send_message(data[1],"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º —é–∑–µ—Ä–±–æ—Ç–æ–º</b>",reply_markup=settings(username,call.from_user.id))
    
    elif data[0] == "start":
        cursor = sqlite_connection.cursor()
        user_id = call.from_user.id
        cursor.execute("SELECT username FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        username = row[0]
        if username ==  "NULL":
            return
        private_key = paramiko.RSAKey.from_private_key_file(private_key_path)
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname='54.93.218.140', username='ubuntu',pkey=private_key)
        stdin, stdout, stderr = client.exec_command('su root')
        stdin.write('dG90ODgyYXdzYXNzaG9sZQo=\n')
        stdin, stdout, stderr = client.exec_command(f'systemctl start {username}')
        print(stdout.read().decode())
        client.close()
        await bot.send_message(data[2],"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è")
    elif data[0] == "stop":
        cursor = sqlite_connection.cursor()
        user_id = call.from_user.id
        cursor.execute("SELECT username FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        username = row[0]
        if username ==  "NULL":
            return
        private_key = paramiko.RSAKey.from_private_key_file(private_key_path)
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname='54.93.218.140', username='ubuntu',pkey=private_key)
        stdin, stdout, stderr = client.exec_command('su root')
        stdin.write('dG90ODgyYXdzYXNzaG9sZQo=\n')
        stdin, stdout, stderr = client.exec_command(f'systemctl stop {username}')
        print(stdout.read().decode())
        client.close()
        await bot.send_message(data[2],"–ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è")
    elif data[0] == "restart":
        cursor = sqlite_connection.cursor()
        user_id = call.from_user.id
        cursor.execute("SELECT username FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        username = row[0]
        if username ==  "NULL":
            return
        private_key = paramiko.RSAKey.from_private_key_file(private_key_path)
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname='54.93.218.140', username='ubuntu',pkey=private_key)
        stdin, stdout, stderr = client.exec_command('su root')
        stdin.write('dG90ODgyYXdzYXNzaG9sZQo=\n')

        stdin, stdout, stderr = client.exec_command(f'systemctl restart {username}')
        print(stdout.read().decode())
        client.close()
        await bot.send_message(data[2],"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        
    else:
        await bot.send_sticker(data[1],rf'{get_stickers("404")}')
        await bot.send_message(data[1],"<b>–•–º–º, –ø–æ—Ö–æ–¥—É –∫–Ω–æ–ø–∫—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –Ω–∞–∂–∞–ª–∏ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @MuRuLOSE</b>")
    

@router.message()
async def echo_handler(message: types.Message) -> None:
    commands = ['/start','—Å—Ç–∞—Ä—Ç','–ø—Ä–∏–≤–µ—Ç']
    if message.text.lower not in commands:
        await message.answer_sticker(rf'{get_stickers("404")}')
        await message.answer("<b>–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –º–æ–∂–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å</b>")


async def main() -> None:
    # Dispatcher is a root router
    dp = Dispatcher()
    # ... and all other routers should be attached to Dispatcher
    dp.include_router(router)

    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    # And the run events dispatching
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())